enable_experimental;

// Create a Heapster environment
env <- heapster_init_env "string_set" "string_set.bc";

// Define permissions for strings and for lists being used as sets
heapster_define_opaque_perm env "string" "" "llvmptr 64" "Prelude.String";


// FIXME: want to define the permission this way, with translation a term and not just an identifier
// heapster_define_opaque_perm env "string_set" "rw:rwmodality, l:lifetime" "llvmptr 64" "List String"

// So we have to do this instead
heapster_define_opaque_perm env "string_set" "rw:rwmodality, l:lifetime" "llvmptr 64" "Prelude.stringList";


// FIXME: want the translations of our assumed funs to use terms
// heapster_assume_fun env "string_set_insert" "(l1:lifetime).arg0:string_set<W,l1>, arg1:string -o arg0:string_set<W,l1>, arg1:true, ret:true" "listInsertM stringEqual"
// heapster_assume_fun env "string_set_remove" "(l1:lifetime).arg0:string_set<W,l1>, arg1:string -o arg0:string_set<W,l1>, arg1:string, ret:true" "listRemoveM stringEqual"

// Instead, we have to define names to use for them
heapster_assume_fun env "string_set_insert" "(l1:lifetime).arg0:string_set<W,l1>, arg1:string<> -o arg0:string_set<W,l1>, arg1:true, ret:true" "Prelude.stringListInsertM";
heapster_assume_fun env "string_set_remove" "(l1:lifetime).arg0:string_set<W,l1>, arg1:string<> -o arg0:string_set<W,l1>, arg1:string<>, ret:true" "Prelude.stringListRemoveM";

// Type-check our insert_remove function
heapster_typecheck_fun env "insert_remove" "(l:lifetime).arg0:string_set<W,l>, arg1:string<>, arg2:string<> -o arg0:string_set<W,l>, arg1:true, arg2:string<>";

// FIXME: should be able to write the above like this when all the changes above happen
// heapster_typecheck_fun env "insert_remove" "(l:lifetime).arg0:string_set<W,l>, arg1:string<>, arg2:string<> -o arg0:string_set<W,l>, arg1:true, arg2:string<>";
