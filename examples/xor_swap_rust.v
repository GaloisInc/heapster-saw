
From Coq          Require Import Lists.List.
From Coq          Require Import String.
From Coq          Require Import Vectors.Vector.
From CryptolToCoq Require Import SAWCoreScaffolding.
From CryptolToCoq Require Import SAWCoreVectorsAsCoqVectors.
From Records      Require Import Records.

From CryptolToCoq Require Import SAWCorePrelude.

Import ListNotations.

Module xor_swap_rust.

Definition xor_swap_rust : forall (e0 : ((@SAWCorePrelude.bitvector) (64))), forall (e1 : ((@SAWCorePrelude.bitvector) (64))), ((CompM) (((@sigT) (unit) ((fun (ret0 : unit) => ((prod) (((@sigT) (((@SAWCorePrelude.bitvector) (64))) ((fun (x_ex0 : ((@SAWCorePrelude.bitvector) (64))) => unit)))) (((prod) (((@sigT) (((@SAWCorePrelude.bitvector) (64))) ((fun (x_ex0 : ((@SAWCorePrelude.bitvector) (64))) => unit)))) (unit))))))))) :=
  (fun (e0 : ((@SAWCorePrelude.bitvector) (64))) (e1 : ((@SAWCorePrelude.bitvector) (64))) => ((@SAWCorePrelude.letRecM) (((@SAWCorePrelude.LRT_Nil))) (((@sigT) (unit) ((fun (ret0 : unit) => ((prod) (((@sigT) (((@SAWCorePrelude.bitvector) (64))) ((fun (x_ex0 : ((@SAWCorePrelude.bitvector) (64))) => unit)))) (((prod) (((@sigT) (((@SAWCorePrelude.bitvector) (64))) ((fun (x_ex0 : ((@SAWCorePrelude.bitvector) (64))) => unit)))) (unit)))))))) (tt) (if ((@SAWCoreScaffolding.true)) then if ((@SAWCoreScaffolding.true)) then if ((@SAWCoreScaffolding.true)) then if ((@SAWCoreScaffolding.true)) then if ((@SAWCoreScaffolding.true)) then if ((@SAWCoreScaffolding.true)) then ((((@returnM) (CompM) (_))) (((@sigT) (unit) ((fun (ret0 : unit) => ((prod) (((@sigT) (((@SAWCorePrelude.bitvector) (64))) ((fun (x_ex0 : ((@SAWCorePrelude.bitvector) (64))) => unit)))) (((prod) (((@sigT) (((@SAWCorePrelude.bitvector) (64))) ((fun (x_ex0 : ((@SAWCorePrelude.bitvector) (64))) => unit)))) (unit)))))))) (((@existT) (unit) ((fun (r0 : unit) => ((prod) (((@sigT) (((@SAWCorePrelude.bitvector) (64))) ((fun (x_ex0 : ((@SAWCorePrelude.bitvector) (64))) => unit)))) (((prod) (((@sigT) (((@SAWCorePrelude.bitvector) (64))) ((fun (x_ex0 : ((@SAWCorePrelude.bitvector) (64))) => unit)))) (unit)))))) (tt) (((pair) (((@existT) (((@SAWCorePrelude.bitvector) (64))) ((fun (x_ex0 : ((@SAWCorePrelude.bitvector) (64))) => unit)) (((@SAWCorePrelude.bvXor) (64) (((@SAWCorePrelude.bvXor) (64) (e0) (e1))) (((@SAWCorePrelude.bvXor) (64) (((@SAWCorePrelude.bvXor) (64) (e0) (e1))) (e1))))) (tt))) (((pair) (((@existT) (((@SAWCorePrelude.bitvector) (64))) ((fun (x_ex0 : ((@SAWCorePrelude.bitvector) (64))) => unit)) (((@SAWCorePrelude.bvXor) (64) (((@SAWCorePrelude.bvXor) (64) (e0) (e1))) (e1))) (tt))) (tt)))))))) else ((((@errorM) (CompM) (_))) (((@sigT) (unit) ((fun (ret0 : unit) => ((prod) (((@sigT) (((@SAWCorePrelude.bitvector) (64))) ((fun (x_ex0 : ((@SAWCorePrelude.bitvector) (64))) => unit)))) (((prod) (((@sigT) (((@SAWCorePrelude.bitvector) (64))) ((fun (x_ex0 : ((@SAWCorePrelude.bitvector) (64))) => unit)))) (unit))))))))) else ((((@errorM) (CompM) (_))) (((@sigT) (unit) ((fun (ret0 : unit) => ((prod) (((@sigT) (((@SAWCorePrelude.bitvector) (64))) ((fun (x_ex0 : ((@SAWCorePrelude.bitvector) (64))) => unit)))) (((prod) (((@sigT) (((@SAWCorePrelude.bitvector) (64))) ((fun (x_ex0 : ((@SAWCorePrelude.bitvector) (64))) => unit)))) (unit))))))))) else ((((@errorM) (CompM) (_))) (((@sigT) (unit) ((fun (ret0 : unit) => ((prod) (((@sigT) (((@SAWCorePrelude.bitvector) (64))) ((fun (x_ex0 : ((@SAWCorePrelude.bitvector) (64))) => unit)))) (((prod) (((@sigT) (((@SAWCorePrelude.bitvector) (64))) ((fun (x_ex0 : ((@SAWCorePrelude.bitvector) (64))) => unit)))) (unit))))))))) else ((((@errorM) (CompM) (_))) (((@sigT) (unit) ((fun (ret0 : unit) => ((prod) (((@sigT) (((@SAWCorePrelude.bitvector) (64))) ((fun (x_ex0 : ((@SAWCorePrelude.bitvector) (64))) => unit)))) (((prod) (((@sigT) (((@SAWCorePrelude.bitvector) (64))) ((fun (x_ex0 : ((@SAWCorePrelude.bitvector) (64))) => unit)))) (unit))))))))) else ((((@errorM) (CompM) (_))) (((@sigT) (unit) ((fun (ret0 : unit) => ((prod) (((@sigT) (((@SAWCorePrelude.bitvector) (64))) ((fun (x_ex0 : ((@SAWCorePrelude.bitvector) (64))) => unit)))) (((prod) (((@sigT) (((@SAWCorePrelude.bitvector) (64))) ((fun (x_ex0 : ((@SAWCorePrelude.bitvector) (64))) => unit)))) (unit))))))))) else ((((@errorM) (CompM) (_))) (((@sigT) (unit) ((fun (ret0 : unit) => ((prod) (((@sigT) (((@SAWCorePrelude.bitvector) (64))) ((fun (x_ex0 : ((@SAWCorePrelude.bitvector) (64))) => unit)))) (((prod) (((@sigT) (((@SAWCorePrelude.bitvector) (64))) ((fun (x_ex0 : ((@SAWCorePrelude.bitvector) (64))) => unit)))) (unit)))))))))))).

End xor_swap_rust.
